services:
  botman:
    restart: unless-stopped
    build:
      context: botman
      dockerfile: Dockerfile
    env_file:
      - .env
    container_name: botman
    environment:
        DISCORD_BOT_TOKEN: ${DISCORD_BOT_TOKEN}
        DISCORD_BOT_OWNER_ID: ${DISCORD_BOT_OWNER_ID}
        LAVALINK_SERVER_PASSWORD: ${LAVALINK_SERVER_PASSWORD}
        LAVALINK_SERVER_HOST: lavalink
        LAVALINK_SERVER_PORT: 2333
        BOT_API_URL: http://backend:8080
    depends_on: 
      - lavalink
      - backend
    networks:
      - lavalink
      - bot-network

  lavalink:
    restart: unless-stopped
    build:
      context: lavalink
      dockerfile: Dockerfile
    env_file:
      - .env
    container_name: lavalink
    environment:
      - _JAVA_OPTIONS=-Xmx2G
      - SERVER_PORT=2333
      - LAVALINK_SERVER_PASSWORD=${LAVALINK_SERVER_PASSWORD}
      - SPOTIFY_CLIENT_ID=${SPOTIFY_CLIENT_ID}
      - SPOTIFY_CLIENT_SECRET=${SPOTIFY_CLIENT_SECRET}
    volumes:
      - ./lavalink/lavalink_application.yml:/opt/Lavalink/application.yml
      - ./lavalink/plugins/:/opt/Lavalink/plugins/
    networks:
      - lavalink
    expose:
      - 2333
    ports:
      - "2333:2333"

  db:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - bot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: backend
      dockerfile: Dockerfile
    container_name: backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable
      - PORT=8080
    depends_on:
      db:
        condition: service_healthy
    networks:
      - bot-network
    expose:
      - 8080

volumes:
  postgres_data:

networks:
  lavalink:
    driver: bridge
  bot-network:
    driver: bridge